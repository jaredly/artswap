// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

enum ArtworkStatus {
    PORTFOLIO
    EVENT
    MATCHED
    FLAGGED
}

enum NotificationType {
    MATCH
    EVENT
    FLAG
    OTHER
}

enum InvitationStatus {
    PENDING
    ACCEPTED
    EXPIRED
}

enum UserRole {
    USER
    SUPER_ADMIN
}

enum UserStatus {
    ACTIVE
    SUSPENDED
    DEACTIVATED
}

enum MatchingAlgorithm {
    FIRST_COME_FIRST_SERVED // Greedy: matches created as votes are finalized
    OPTIMAL_MATCHING // Non-greedy: waits for all votes, optimal assignment
    PREFERENCE_WEIGHTED // Non-greedy: prioritizes mutual high preferences
    RANDOM_MATCHING // Non-greedy: random assignment of mutual likes
}

model Artist {
    id                      String               @id @default(uuid())
    email                   String               @unique
    passwordHash            String
    fullName                String
    profilePic              String? // URL or file path
    role                    UserRole             @default(USER)
    status                  UserStatus           @default(ACTIVE)
    emailVerified           Boolean              @default(false)
    verificationToken       String?
    verificationTokenExpiry DateTime?
    resetToken              String? // for password reset
    resetTokenExpiry        DateTime?
    memberships             GroupMembership[]
    artworks                Artwork[]
    notifications           Notification[]
    votes                   Vote[]
    eventParticipations     EventParticipation[]
    auditLogs               AuditLog[]
    sessions                Session[]
    createdAt               DateTime             @default(now())
}

model Group {
    id          String            @id @default(uuid())
    name        String
    memberships GroupMembership[]
    events      Event[]
    createdAt   DateTime          @default(now())
    Invitation  Invitation[]
}

model GroupMembership {
    id        String   @id @default(uuid())
    artist    Artist   @relation(fields: [artistId], references: [id])
    artistId  String
    group     Group    @relation(fields: [groupId], references: [id])
    groupId   String
    isAdmin   Boolean  @default(false)
    createdAt DateTime @default(now())

    @@unique([artistId, groupId])
}

model Event {
    id                String               @id @default(uuid())
    group             Group                @relation(fields: [groupId], references: [id])
    groupId           String
    phase             String // open, voting, closed, archived
    submissionLimit   Int
    matchingAlgorithm MatchingAlgorithm    @default(PREFERENCE_WEIGHTED)
    matchingTriggered Boolean              @default(false) // For non-greedy algorithms
    artworks          Artwork[]
    matches           Match[]
    votes             Vote[]
    participations    EventParticipation[]
    createdAt         DateTime             @default(now())
}

model Artwork {
    id          String        @id @default(uuid())
    artist      Artist        @relation(fields: [artistId], references: [id])
    artistId    String
    event       Event?        @relation(fields: [eventId], references: [id])
    eventId     String?
    title       String
    description String?
    medium      String?
    dimensions  String?
    year        Int?
    images      Json // Array of file paths or URLs
    status      ArtworkStatus
    votes       Vote[]
    createdAt   DateTime      @default(now())
    Match1      Match?        @relation("MatchArtwork1")
    Match2      Match?        @relation("MatchArtwork2")
}

model Match {
    id         String   @id @default(uuid())
    event      Event    @relation(fields: [eventId], references: [id])
    eventId    String
    artwork1   Artwork? @relation("MatchArtwork1", fields: [artwork1Id], references: [id])
    artwork1Id String   @unique
    artwork2   Artwork? @relation("MatchArtwork2", fields: [artwork2Id], references: [id])
    artwork2Id String   @unique
    status     String // e.g., pending, completed
    createdAt  DateTime @default(now())
}

model Vote {
    id              String    @id @default(uuid())
    artist          Artist    @relation(fields: [artistId], references: [id])
    artistId        String
    artwork         Artwork   @relation(fields: [artworkId], references: [id])
    artworkId       String
    event           Event     @relation(fields: [eventId], references: [id])
    eventId         String
    liked           Boolean
    preferenceOrder Int? // 1 = most preferred, null for disliked artworks
    finalizedAt     DateTime? // when user finalized votes for this event, null = not finalized
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    @@unique([artistId, artworkId, eventId])
    @@unique([artistId, eventId, preferenceOrder]) // Ensure unique preference order per user per event
}

model EventParticipation {
    id       String   @id @default(uuid())
    artist   Artist   @relation(fields: [artistId], references: [id])
    artistId String
    event    Event    @relation(fields: [eventId], references: [id])
    eventId  String
    joinedAt DateTime @default(now())

    @@unique([artistId, eventId])
}

model Session {
    id        String   @id @default(uuid())
    artist    Artist   @relation(fields: [artistId], references: [id])
    artistId  String
    token     String   @unique
    expiresAt DateTime
    createdAt DateTime @default(now())
}

model AuditLog {
    id         String   @id @default(uuid())
    actor      Artist   @relation(fields: [actorId], references: [id])
    actorId    String
    action     String // "FLAG_ARTWORK", "REMOVE_USER", "CHANGE_EVENT_PHASE", etc.
    targetType String // "ARTWORK", "USER", "EVENT", "GROUP"
    targetId   String
    details    Json? // Additional context
    createdAt  DateTime @default(now())
}

model Invitation {
    id        String           @id @default(uuid())
    group     Group            @relation(fields: [groupId], references: [id])
    groupId   String
    email     String
    token     String           @unique
    status    InvitationStatus
    createdAt DateTime         @default(now())
}

model Notification {
    id        String           @id @default(uuid())
    artist    Artist           @relation(fields: [artistId], references: [id])
    artistId  String
    type      NotificationType
    message   String
    read      Boolean          @default(false)
    createdAt DateTime         @default(now())
}
